# This is a basic workflow to help you get started with Actions

name: geda

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main, release-*]
    tags: [v*]
  pull_request:
    branches: [main, release-*]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.17
      GOLANGCILINT_VER: v1.31
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      TEST_OUTPUT_FILE_PREFIX: test_report
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        target_arch: [arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: macOS-latest
            target_os: darwin
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Install Docker CE for buildx
        if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      # - name: Parse release version and set REL_VERSION
      #   run: python ./.github/scripts/get_release_version.py
      - name: Check white space in .md files
        if: matrix.target_os == 'linux' && github.event_name == 'pull_request'
        run: |
          TRAILING_WHITESPACE=0
          # only check changed docs in pr
          for file in $(git diff --cached --name-only --diff-filter=ACRMTU $GITHUB_BASE_REF | grep "\.md"); do
            if grep -r '[[:blank:]]$' "$1" > /dev/null; then
              echo "trailing whitespace: ${1}" >&2
              ERRORS=yes
              ((TRAILING_WHITESPACE=TRAILING_WHITESPACE+1))
            fi
          done
          if [[ -n "$ERRORS" ]]; then
            echo >&2
            echo "ERRORS found" >&2
            echo "${TRAILING_WHITESPACE} files with trailing whitespace" >&2
            echo >&2
            exit 1
          fi
      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v2.2.1
        with:
          version: ${{ env.GOLANGCILINT_VER }}
      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff
      # - name: Run gen-proto check diff
      #   if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
      #   run: |
      #     wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip
      #     unzip protoc-3.14.0-linux-x86_64.zip -d protoc
      #     sudo cp -r protoc/include/google/ /usr/local/include/
      #     sudo chmod -R 755 /usr/local/include/google
      #     sudo cp protoc/bin/protoc /usr/local/bin/
      #     sudo chmod +x /usr/local/bin/protoc
      #     rm -r protoc protoc-3.14.0-linux-x86_64.zip
      #     make init-proto
      #     make gen-proto check-proto-diff
      - name: Run make test
        env:
          COVERAGE_OPTS: '-coverprofile=coverage.txt -covermode=atomic'
        if: matrix.target_arch == 'amd64'
        run: make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage.txt # optional
      # - name: Run make release to build and archive binaries
      #   run: |
      #     mkdir -p ${{ env.ARCHIVE_OUTDIR }}
      #     make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      # - name: upload artifacts
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: dapr_${{ matrix.target_os }}_${{ matrix.target_arch }}
      #     path: ${{ env.ARCHIVE_OUTDIR }}
      # - name: upload artifacts - grafana dashboards
      #   if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: dapr_grafana_dashboards
      #     path: ./grafana/*.json
      # - name: docker login
      #   if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      # - name: Build and push docker images
      #   if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
      #   run: |
      #     echo "Build docker image and push image..."
      #     make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=${{ secrets.DOCKER_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      # - name: Upload test results
      #   if: always()
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ matrix.target_os }}_${{ matrix.target_arch }}_test_unit.json
      #     path: ${{ env.TEST_OUTPUT_FILE_PREFIX }}_unit.json
